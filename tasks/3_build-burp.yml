---

- name: build-burp | ensure cache for apt is updated
  apt:
    update_cache: yes
    cache_valid_time: "43200"
  changed_when: false
  when: ansible_os_family == 'Debian'

- name: build-burp | install build dependencies
  package:
    name: "{{ build_dependencies | join(',') }}"
    state: present

- name: build-burp | force reinstall burp
  file:
    path: "{{ download_dir }}"
    state: absent
  when: burp_force_reinstall | bool

- name: build-burp | Ensure download directory is present
  file:
    path: "{{ download_dir }}"
    state: directory

- name: build-burp | GET burp backup and restore
  get_url:
    url: "{{ burpurl }}"
    dest: "{{ download_dir }}/{{ burpsrc }}.{{ burpsrcext }}"
    timeout: 30

- name: build-burp | Unpack Burp source files tar.gz
  shell: cd {{ download_dir }} && tar -xzvf {{ burpsrc }}.{{ burpsrcext }} creates={{ download_dir }}/{{ burpsrc }}
  register: unpack_src_tar
  when: burpsrcext == 'tar.gz'

- name: build-burp | Unpack Burp source files zip
  shell: cd {{ download_dir }} && unzip {{ burpsrc }}.{{ burpsrcext }} creates={{ download_dir }}/{{ burpsrc }}
  register: unpack_src_zip
  when: burpsrcext == 'zip'

- name: build-burp | Autoreconf Burp source files
  shell: cd {{ download_dir }}/{{ burpsrc }} && autoreconf -vif creates={{ download_dir }}/{{ burpsrc }}/configure

- name: build-burp | ./configure
  shell: cd {{ download_dir }}/{{ burpsrc }} && {{ burp_configure_line }}
  args:
    creates: "{{ download_dir }}/{{ burpsrc }}/Makefile"

- name: build-burp | Make
  shell: cd {{ download_dir }}/{{ burpsrc }} && make creates={{ download_dir }}/{{ burpsrc }}/burp

- name: build-burp | check if burp is installed
  stat:
    path: "{{ burp_bin_path }}"
  register: stb

- name: build-burp | Uninstall burp
  shell: cd {{ download_dir }}/{{ burpsrc }} && make uninstall removes={{ burp_bin_path }}
  when: stb.stat.exists and ( unpack_src_tar.changed or unpack_src_zip.changed )
  tags:
    - skip_ansible_lint

- name: build-burp | Make install
  shell: cd {{ download_dir }}/{{ burpsrc }} && make install creates={{ burp_bin_path }}
  notify:
    - restart burp server
    - restart burp server systemd

- name: build-burp block | Verify burp version if the burp_version is not master
  block:
  # Verify burp version if the burp_version is not master

  # Run this task always to register the burp version
  - name: build-burp | read burp installed version
    shell: burp -V
    changed_when: false
    register: cmd_burp_version
    tags:
      - skip_ansible_lint
    check_mode: no
    become: false

  - name: build-burp | failed when burp version is different than the one that must be installed
    fail: msg="burp version is different than the one that must be installed"
    when: cmd_burp_version.stdout != burpsrc

  when: burp_version != "master"
