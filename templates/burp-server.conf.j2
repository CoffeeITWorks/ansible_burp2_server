# This is an example config file for the burp server.

mode = server

# The default addresses to listen on depend upon compile time options.
# They may be overridden here.
listen = {{ burp_server_listen }}
# Think carefully before changing the status port address, as it can be used
# to view the contents of backups.
# If you do not wish to run a status server at all, comment status_port out.
listen_status = {{ burp_server_listen_status }}

directory = {{ burp_server_data }}
dedup_group = {{ burp_server_dedup_group }}
clientconfdir = {{ burp_server_clientconfdir }}
# Choose the protocol to use.
# 0 to decide automatically, 1 to force protocol1 mode (file level granularity
# with a pseudo mirrored storage on the server and optional rsync). 2 forces
# protocol2 mode (inline deduplication with variable length blocks).
# Like many other settings, this can be set per client in the clientconfdir
# files.
protocol = {{ burp_server_protocol }}
pidfile = {{ burp_server_pidfile }}
hardlinked_archive = {{ burp_server_hardlinked_archive }}
librsync={{ burp_server_librsync }}
working_dir_recovery_method = {{ burp_server_working_dir_recovery_method }}
max_resume_attempts = {{ burp_max_resume_attempts }}
max_children = {{ burp_server_max_children }}
max_status_children = {{ burp_server_max_status_children }}
umask = {{ burp_server_umask }}
syslog = {{ burp_server_syslog }}
stdout = {{ burp_server_stdout }}
# The following options can restrict what the client can do.
# Restore clients can override all of these expect for force_backup.
client_can_delete = {{ burp_server_client_can_delete }}
# Set client_can_force_backup to 0 to only allow timed backups.
client_can_force_backup = {{ burp_server_client_can_force_backup }}
client_can_list = {{ burp_server_client_can_list }}
# Set client_can_restore to 0 if you want restores to only be initialised by
# the server.
client_can_restore = {{ burp_server_client_can_restore }}
client_can_verify = {{ burp_server_client_can_verify }}
# Ratelimit throttles the send speed. Specified in Megabits per second (Mb/s).
# ratelimit = 1.5
{% if burp_server_ratelimit %}
ratelimit = {{ burp_server_ratelimit }}
{% endif %}
# Network timeout defaults to 7200 seconds (2 hours).
# network_timeout = 7200
{% if burp_server_network_timeout %}
network_timeout = {{ burp_server_network_timeout }}
{% endif %}

# Server storage compression. Default is zlib9. Set to zlib0 to turn it off.
compression = {{ burp_server_compression }}

# When the client version does not match the server version, log a warning.
# Set to 0 to turn it off.
version_warn = {{ burp_server_version_warn }}

# More configuration files can be read, using syntax like the following
# (without the leading '# ').
# . path/to/more/conf

# Location of autoupgrade files to serve to clients. Leave it commented out
# to not autoupgrade clients.
autoupgrade_dir = {{ burp_server_autoupgrade_dir }}

# You can have as many 'keep' lines as you like.
# For example, if running backups daily, setting 7, 4, 6 will keep
# 7 daily backups, 4 weekly, and 6 four-weekly backups.
{% for keep in burp_server_keep %}
keep = {{ keep }}
{% endfor %}
# keep = 4
# keep = 6

# Commented due to issue https://github.com/grke/burp/issues/475?_pjax=%23js-repo-pjax-container
# Run as different user/group.
# user = root
# group = root

# CA options.
# If you want your server to be a certificate authority and generate its own
# certificates, uncomment the following lines. If the directory specified in
# ca_conf does not exist, the server will create, populate it, and the paths
# indicated by ssl_cert_ca, ssl_cert, ssl_key and ssl_dhfile below will be
# overwritten. See docs/burp_ca.txt for more information.
ca_conf = {{ burp_server_ca_conf }}
ca_name = {{ burp_server_ca_name }}
ca_server_name = {{ ansible_hostname }}
ca_burp_ca = {{ burp_server_ca_burp_ca }}

# Check for revoked certificates in the certificate revocation list.
# Turn this off if you use the old ssl_extra_checks_script server script.
ca_crl_check = {{ burp_server_ca_crl_check }}

# SSL certificate authority - same file on both server and client
ssl_cert_ca = {{ burp_server_ssl_cert_ca }}

# Server SSL certificate
ssl_cert = {{ burp_server_ssl_cert }}

# Server SSL key
ssl_key = {{ burp_server_ssl_key }}

# Server SSL ciphers
#ssl_ciphers =

# Server SSL compression. Default is zlib5. Set to zlib0 to turn it off.
#ssl_compression = zlib5

# SSL key password, for loading a certificate with encryption.
ssl_key_password = {{ burp_server_ssl_key_password }}

# Server DH file.
ssl_dhfile = {{ burp_server_ssl_dhfile }}

timer_script = {{ burp_server_timer_script }}
# Ensure that 20 hours elapse between backups
# Available units:
# s (seconds), m (minutes), h (hours), d (days), w (weeks), n (months)
#timer_arg = 20h
# Allow backups to start in the evenings and nights during weekdays
#timer_arg = Mon,Tue,Wed,Thu,Fri,00,01,02,03,04,05,19,20,21,22,23
# Allow more hours at the weekend.
#timer_arg = Sat,Sun,00,01,02,03,04,05,06,07,08,17,18,19,20,21,22,23
# Note that, if you specify no timebands, the default timer script will never
# allow backups.
{% for timer_arg in burp_server_timer_args %}
timer_arg = {{ timer_arg }}
{% endfor %}

# Uncomment the notify_success_* lines for email notifications of backups that
# succeeded.
# In the subject line, the following are substituted:
# %b - "backup"/"restore"/"verify"
# %c - client name
# %w - number of warnings, if any
#notify_success_script = /usr/share/burp/scripts/notify_script
#notify_success_arg = sendmail -t
#notify_success_arg = To: youremail@example.com
#notify_success_arg = From: burp
#notify_success_arg = Subject: %b succeeded: %c %w
# Uncomment the following to have success notifications only if there were
# warnings.
#notify_success_warnings_only = 1
# Uncomment the following to have success notifications only if there were
# new or changed files.
#notify_success_changes_only = 1

# Uncomment the following for email notifications of backups that failed.
#notify_failure_script = /usr/share/burp/scripts/notify_script
#notify_failure_arg = sendmail -t
#notify_failure_arg = To: youremail@example.com
#notify_failure_arg = From: burp
#notify_failure_arg = Subject: %b failed: %c %w
{% if burp_notify_failure  %}
notify_failure_script = /usr/share/burp/scripts/notify_script
notify_failure_arg = sendmail -t
notify_failure_arg = To: {{ burp_notify_failure_email_to }}
notify_failure_arg = From: {{ burp_notify_failure_email_from }}
notify_failure_arg = Subject: %b failed: %c %w
{% endif %}

# The server can run scripts on each connection after authentication and before
# disconnecting.
#server_script_pre = /usr/share/burp/scripts/ssl_extra_checks_script
#server_script_pre_arg = {{ burp_server_etc }}/crl
#server_script_pre_arg = {{ burp_server_etc }}/burp-server.conf
#server_script_pre_arg = /usr/share/burp/scripts/server-pre-script.local
# Set server_script_pre_notify to 1 to have notifications on server_script_pre
# returning non-zero. Most people will want to leave this off - it could
# result in a lot of emails because clients normally connect once every 20
# minutes. Requires notify_failure_script to be set above.
#server_script_pre_notify = 0
#server_script_post =
#server_script_post_arg =
#server_script_post_arg =
#server_script_post_run_on_fail=0
# As for server_script_pre_notify, but for post.
#server_script_post_notify = 0
{% if burp_server_script_pre != false %}
server_script_pre = {{ burp_server_script_pre }}
    {% if burp_server_scripts_pre_args is defined %}
        {% for script_arg in burp_server_scripts_pre_args %}
server_script_pre_args = {{ script_args }}
        {% endfor %}
    {% endif %}
{% endif %}

{% if burp_server_script_post != false %}
server_script_post = {{ burp_server_script_post }}
    {% if burp_server_script_post_args is defined %}
        {% for script_arg in burp_server_script_post_args %}
server_script_post_args = {{ script_args }}
        {% endfor %}
    {% endif %}
{% endif %}

# Clients that are able to list and restore files belonging to any other
# client. If this is too permissive, you may set a restore_client for
# individual original clients in the individual clientconfdir files.
# restore_client = someclient
# restore_client = someotherclient

# Whether or not the server process should cache the tree when a monitor client
# is browsing a backup. Advantage: speed. Disadvantage: more memory is used.
monitor_browse_cache = {{ burp_server_monitor_cache }}

{% if burp_manual_delete_enabled %}
manual_delete = {{ burp_trash }}
{% endif %}

{% for client in burp_restore_clients %}
restore_client = {{ client }}
{% endfor %}

{% if burp_server_custom_lines %}
{% for l in burp_server_custom_lines %}
{{ l }}
{% endfor %}
{% endif %}

{% if burp_server_port_per_operation_bool %}
# These ports are based on: https://github.com/CoffeeITWorks/ansible_burp2_server/issues/11
# Compatible since burp 2.1.10
{% for l in burp_server_ports_per_operation %}
{{ l }}
{% endfor %}
{% endif %}

